(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"f:\\Vic\\Desktop\\Github\\Boilerplates\\static_react_site\\build\\js\\main.js":[function(require,module,exports){
var Liquid = React.createClass({displayName: "Liquid",
	getInitialState: function() {
		return {
			currentTemp: 10
		};
	},
	setTemperature: function(e) {
		this.setState({currentTemp: e.target.value});
	},
	render: function() {

		var stateOfMatter;		// empty variable that will hold either "Liquid", "Solid", or "Gas"

		// If temp is on/below freezing, it's a solid
		if (this.state.currentTemp <= this.props.config.freezing) {
			stateOfMatter = 'Solid';

		// if temp is on/above boiling, it's a gas
		} else if (this.state.currentTemp >= this.props.config.boiling) {
			stateOfMatter = 'Gas';

		// otherwise it's just a liquid
		} else {
			stateOfMatter = 'Liquid';
		}

		return (
			React.createElement("div", null, 
				React.createElement("input", {type: "text", onChange:  this.setTemperature, defaultValue:  this.state.currentTemp}), 
				React.createElement("p", null, "At ",  this.state.currentTemp, "Â°F, ",  this.props.config.name, " is considered to be a \"",  stateOfMatter, "\" state of matter.")
			)
		);

	}
});

var LiquidsList = React.createClass({displayName: "LiquidsList",
	render: function() {
		var liquids = this.props.liquids.map(function(liquidObject, index){
						return React.createElement(Liquid, {config:  liquidObject, key:  index });
					  })
		return (
			React.createElement("div", null, 
				 liquids 
			)
		);

	}
});

var ethanol = {
	name: "Ethanol",
	freezing: -173.2,
	boiling: 173.1
};
var water = {
	name: "Water",
	freezing: 32,
	boiling: 212
};

ReactDOM.render(React.createElement(LiquidsList, {liquids:  [ethanol, water] }), document.getElementById('form'));
var list = [{num:1},{num:2},{num:3},{num:4},{num:5}];

var List = React.createClass({displayName: "List",
	render: function() {
		var renderedList = list.map(function(item, i){
			return React.createElement("li", {key: i}, JSON.stringify(item))
		})
		return (
			React.createElement("ul", null, renderedList)
	)}/* div required: can only render 1 set of elements *//* Cannot render JSON raw */
});
var List2 = React.createClass({displayName: "List2",
	render: function() {
		var isTwo = function(input){
			return input.num == 2;
		}
		var renderedList = list.map(function(item, i){
			return React.createElement("li", {key: i}, isTwo(item).toString())
		})
		return (
			React.createElement("ul", null, renderedList)
	)}/* Cannot render booleans raw */
});
var List3 = React.createClass({displayName: "List3",
	render: function() {
		var threeplus = function(input){
			return input.num > 3;
		}
		var renderedList = list.filter(threeplus).map(function(item, i){
			return React.createElement("li", {key: i}, JSON.stringify(item))
		})
		return (
			React.createElement("ul", null, renderedList)
	)}
});



ReactDOM.render(React.createElement(List, null), document.getElementById('list1'));
ReactDOM.render(React.createElement(List2, null), document.getElementById('item_filt'));
ReactDOM.render(React.createElement(List3, null), document.getElementById('list_filt'));

var ListAdd = React.createClass({displayName: "ListAdd",
	onClick: function(){
		list.push({num:(list.length+1)});
		console.log(list);
	},
	render: function() {
		return (
		React.createElement("button", {onClick: this.onClick}, 
			React.createElement("span", null, this.props.text)
		)
	)}
});

ReactDOM.render(React.createElement(ListAdd, {text: "add something to list"}), document.getElementById('list_add'));

var availTabs = [1,2,3];

var Tab = React.createClass({displayName: "Tab",
	render: function(){
		if(this.props.active){
			return React.createElement("li", {onClick: this.props.onClick, className: "tab + active"}, this.props.tabText);
		}
		return React.createElement("li", {onClick: this.props.onClick, className: "tab"}, this.props.tabText);
	}
});

var TabsList = React.createClass({displayName: "TabsList",
	getInitialState: function() {
		return {
			onTab: 1
		};
	},
	handleClick: function(e) {
		this.setState({ onTab: parseInt(e.target.innerHTML,10) },function () {/*setState is not instant, do something here like you would an async function*/});
	},
	render: function(){
		var tabs = availTabs.map((item,i) => {
			var isItActive = this.state.onTab === item;
			 return React.createElement(Tab, {active: isItActive, key: i, tabText: item, onClick: this.handleClick})
			 });
		return React.createElement("ul", {className: "horiz-list"}, 	tabs	);
	}
});

ReactDOM.render(React.createElement(TabsList, null), document.getElementById('tabs'));

var Timer = React.createClass({displayName: "Timer",

    getInitialState: function(){

        // This is called before our render function. The object that is 
        // returned is assigned to this.state, so we can use it later.

        return { elapsed: 0 };
    },

    componentDidMount: function(){

        // componentDidMount is called by react when the component 
        // has been rendered on the page. We can set the interval here:
		
        this.timer = setTimeout(()=>{setInterval(this.tick, 50)},700);
    },

    componentWillUnmount: function(){

        // This method is called immediately before the component is removed
        // from the page and destroyed. We can clear the interval here:

        clearInterval(this.timer);
    },

    tick: function(){

        // This function is called every 50 ms. It updates the 
        // elapsed counter. Calling setState causes the component to be re-rendered

        this.setState({elapsed: new Date() - this.props.start});
    },

    render: function() {
        
        var elapsed = Math.round(this.state.elapsed / 100);

        // This will give a number with one digit after the decimal dot (xx.x):
        var seconds = (elapsed / 10).toFixed(1);    

        // Although we return an entire <p> element, react will smartly update
        // only the changed parts, which contain the seconds variable.

        return React.createElement("p", null, "This example was started ", React.createElement("b", null, seconds, " seconds"), " ago.");
    }
});


ReactDOM.render(React.createElement(Timer, {start: Date.now()}),document.getElementById('timed_var'));
var FancyButton = React.createClass({displayName: "FancyButton",
	render: function() {
		return (
		React.createElement("button", {onClick: this.props.onClick}, 
			React.createElement("i", {className: "fa " + this.props.icon}), 
			React.createElement("span", null, this.props.text)
		)
	)}
});

var HelloWorld = React.createClass({displayName: "HelloWorld",
	getInitialState: function() {
		return {
			counter: 0
		};
	},

	increment: function() {
		this.setState({ counter: this.state.counter+1 });
	},

	render: function() {
		return React.createElement("div", null, 
			React.createElement("div", null, this.state.counter), 
			React.createElement(FancyButton, {text: "Increment!", icon: "fa-arrow-circle-o-up", onClick: this.increment})
		);
	}
});

ReactDOM.render(React.createElement(HelloWorld, null), document.getElementById('btn'));

var Var1 = React.createClass({displayName: "Var1",
	render: function() {
		var variable1 = "This is Variable1";
		return (
			React.createElement("div", null, 
			React.createElement("span", null, variable1), 
			React.createElement("span", null, this.props.text)
			)
	)}/* div required: can only render 1 set of elements */
});

ReactDOM.render(React.createElement(Var1, {text: "This is Prop1"}), document.getElementById('var1'));
},{}]},{},["f:\\Vic\\Desktop\\Github\\Boilerplates\\static_react_site\\build\\js\\main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
